배열 Array
	 연속적인 메모리상에 동일한 타입의 요소를 일렬로 저장하는 자료 구조
	 인덱스를 사용하여 직접적으로 엑세스할 수 있음
	 고정된 크기
	 특징
		인덱스를 사용할 경우 - 소요시간: 0(1)
		인덱스를 알지 못하고 소트되지 않은 배열 - 소요시간: 0(n)
		소트된 배열 Binary Search - 소요시간: 0(logN)
	 
		.NET Framework의 System.Array에서 파생
		System.Array의 메소드, 프로퍼티를 사용

동적 배열 Dynamic Array
	 배열은 고정된 크기의 연속된 배열 요소들의 집합이므로 배열을 초기화 할 때 총 배열 요소의
	수를 미리 지정해야 함 하지만 경우에 따라 배열요소가 몇 개나 필요한 지 미리 알 수 없는 경우가 있음
	 .NET에는 이러한 동적 배열을 지원하는 클래스로 ArrayList와 List<T> 지원
	특징
		배열 확장이 필요한 경우 내부적으로 배열 크기가 2배인 새로운 배열을 생성
		모든 기존 배열 요소들을 새로운 배열에 복사 후 기존 배열을 해제
		Time Complexity는 
			인덱스를 통할 경우 O(1)
			값으로 검색할 경우 O(n)

	ArrayList 클래스
		모든 배열 요소가 object 타입인 Non-generic 동적 배열 클래스
		.NET의 Non-generic 클래스들은 System.Collections 네임스페이스 안에 있으며, 
		단점으로 
			박싱 / 언박싱이 일어남
				ArrayList는 배열 요소를 읽어 사용할 때 
				object를 리턴하므로 일반적으로 원하는 타입으로 먼저 캐스팅(Casting)한 후 사용하게 됨
				
	List<T> 클래스
		배열요소가 T 타입인 Generics로서 동적 배열을 지원하는 클래스
		.NET의 Generic 클래스들은 System.Collections.Generic 네임스페이스 안에 있으며,
		내부적으로 배열을 가지고 있으며, 동일한 타입의 데이타를 저장
		만약 미리 할당된 배열 크기가 부족하면 내부적으로 배열을 2배로 늘려 동적으로 배열을 확장
		ArrayList와 다르게 캐스팅을 할 필요가 없으며 박싱/언박싱의 문제를 발생 시키지 않음
		
	SortedList<TKey,TValue> 클래스
		Key값으로 Value를 찾는 Map ADT 타입을 내부적으로 배열을 이용해 구현한 클래스
		.NET에서 MAP ADT를 구현한 클래스로
			해시테이블을 이용한 - Hashtable/Dictionary클래스
			이진검색트리를 이용한 - SortedDictionary
			배열을 이용한 - SortedList 등
		내부적으로 키값으로 소트된 배열을 가지고 있으며 
		이진검색(Binary Search)이 가능 
		O(log n)의 검색 시간이 소요
		내부적으로 배열을 2배로 늘려 동적으로 배열을 확장
	
	ConcurrentBag 클래스
		.NET 4.0 부터 제공 
		리스트와 비슷하게 객체들의 컬렉션을 저장
		입력 순서를 보장하지는 않음
		데이타를 추가하기 위해 Add() 메서드를 사용
		데이타를 읽기 위해서는 foreach문 혹은 TryPeek(), TryTake() 메서드를 사용
			- TryPeek()은 ConcurrentBag에서 데이타를 읽기만
			- TryTake()는 데이타를 읽을 후 해당 요소를 ConcurrentBag에서 삭제
		멀티쓰레드가 동시에 엑세스 가능
	
링크드 리스트 Linked List
	데이타를 포함하는 노드들을 연결하여 컬렉션을 만든 자료 구조, 각 노드는 데이타와 다음/이전 링크 포인터 존재
	단일 연결 리스트
		- 노드를 다음 링크로만 연결한 리스트
	이중 연결 리스트
		- 각 노드를 다음 링크와 이전 링크 모두 연결한 리스트
	순환 연결 리스트
		- 링크를 순환해서 마지막 노드의 다음 링크가 처음 노드를 가리키게 했을 경우
	
	장.단점
		- 노드를 삽입, 삭제하기 편리 : O(1) 
		- 노드를 검색하기 위해서는 : O(n)
	
	LinkedList<T> 클래스
		이중 링크드 리스트로 구현, 리스트 노드는 LinkedListNode 클래스로 표현
		처음 또는 끝, 혹은 특정 노드의 앞, 뒤에 새 노드를 추가
			AddFirst, AddLast, AddBefore, AddAfter 등의 메서드 호출

큐  Queue
	먼저 추가된 데이타가 먼저 출력 처리되는(FIFO, First In First Out) 자료 구조
	순서대로 처리해야 하는 상황에 이용
	맨 뒤(tail)에 데이타를 계속 추가하고, 맨 앞(head)에서만 데이타를 읽기 때문에 순차적으로 데이타를 처리
	
	Queue 클래스	
		Queue클래스와 이의 Generic 형태인 Queue<T> 클래스
		내부적으로 순환 배열 (Circular Array)로 구현
		배열의 마지막 요소에 다다른 경우 다시 배열 처음 요소로 순환하는 구조
	ConcurrentQueue 클래스
		멀티쓰레딩 환경에서 큐를 보다 간편하게 사용할 수 있는 새로운 클래스
		기본 동작 메서드 Enqueue(), TryDequeue()
		Dequeue() 메서드가 없고 대신 TryDequeue() 메서드를 사용
		Peek() 메서드 대신 TryPeek() 메서드를 사용

스택 Stack
	가장 나중에 추가된 데이타가 먼저 출력 처리(LIFO, Last In First Out) 자료 구조
	가장 최신 입력된 순서대로 처리해야 하는 상황에 이용
	한 쪽 끝에서만 자료를 넣거나 뺄 수 있는 구조
	저장하는 것은 Push, 가장 최근 것부터 꺼내는 것은 Pop
	
	Stack 클래스
		 Non-generic인 Stack클래스와 이의 Generic 형태인 Stack<T> 클래스
		 내부적으로 순환 배열 (Circular Array)으로 구현
		 스택이 가득 차면 자동으로 배열을 동적으로 확장
	ConcurrentStack 클래스
		멀티쓰레딩 환경에서 스택을 보다 간편하게 사용할 수 있는 새로운 클래스
		기본 동작 메서드 Push(), TryPop()
		Pop() 메서드가 없고 대신 TryPop() 메서드를 사용

해시테이블 Hash Table
	키 값을 해시 함수(Hash function)으로 해싱하여 해시테이블의 특정 위치로 직접 엑세스하도록 만든 방식
	낭비되는 공간을 줄이기 위해 해시 함수를 사용
	
	Hashtable 클래스
		Key값과 Value값 모두 object 타입을 받아들이며, 박싱/언박싱을 진행
		Double Hashing 방식을 사용하여 Collision Resolution 수행
		Key 충돌(Collision)이 발생하면, 다른 해시함수를 계속 사용하여 빈 버켓을 찾게 됨
		추가, 삭제, 검색에서 O(1)의 시간이 소요
	
	Dictionary<Tkey,TValue> 클래스
		Key값과 Value값 모두 Strong type을 받아들이며, 박싱/언박싱을 일으키지 않음
		Chaining 방식을 사용하여 Collision Resolution을 수행
		추가, 삭제, 검색에서 O(1)의 시간이 소요
		
	ConcurrentDictionary<Tkey,TValue> 클래스
		멀티쓰레딩 환경에서 Dictionary를 보다 간편하게 사용할 수 있는 새로운 클래스
		데이타를 추가하기 위해 TryAdd() 메서드를 사용
		키값을 읽기 위해서는 TryGetValue() 메서드를 사용
		기존 키값을 갱신하기 위해서 TryUpdate() 메서드를, 기존 키를 지우기 위해서는 TryRemove() 메서드를 사용

트리 Tree
	계층적인 자료를 나타내는데 자주 사용
	하나이하의 부모노드와 복수 개의 자식노드들 가짐
	하나의 루트 노드에서 출발 자식 노드들을 갖게 됨(반복)
	다시 자기 자신의 노드로 돌아오는 순환 구조를 가질 수 없음
	기업 조직도, 대중소 지역 구조, 데이타 인덱스 파일 등에 적합한 자료구조
	
이진 트리 Binary Tree
	자식노드가 0~2개 인 트리 
	데이터필드와 왼쪽노드 및 오른쪽노드를 갖는 구조
	검색 시간은 0(n)

이진검색트리 Binary Search Tree
	이진트리의 모든 속성을 가짐 + 특정 노드에서 자신의 노드보다 작은 값들은 모두 왼쪽에 있고, 큰 값들은 모두 오른쪽에 위치한다는 점
	중복된 값을 허락하지 않음
	매 검색마다 검색영역을 절반으로 줄여 O(log n)으로 검색

그래프 Graph (.NET Framework은 그래프와 관련된 클래스를 제공하지 않는다)
	노드(꼭지점, Vertex)과 변(Edge)로 구성
	트리와 다르게 사이클(Cycle)을 허용
	방향이 있는 그래프(Directed Graph), 혹은 방향이 없는 그래프(Undirected Graph)로 나눔
	도시간 최단 행로를 구하거나 웹 링크 연결도를 표현하는 등 여러 종류의 자료를 표현하는데 사용
	
Heap
	속성(Heap Property)를 만족하는 트리 기반의 자료구조
	부모와 자식 노드간의 순서는 일정, 같은 자식노드들 사이의 순서는 상관 없음
		부모 노드 >= 자식 노드보다 크거나 같아야 하는 경우(max heap)와 
		부모 노드가 <= 자식 노드보다 작거나 같아야 하는 경우(min heap)로 나뉨
	Heap은 메모리 구조에서 말하는 Heap과는 별개인 서로 다른 개념
	
	BinaryHeap 클래스
		핵심 메서드는 데이타를 새로 추가하는 Add와 하나의 최상위 루트노드 데이타를 가져오는 Remove 메서드
		한번에 하나씩 최대 혹은 최소의 데이타를 가져오는 기능이 가장 핵심적인 기능
			Add() : 
				데이타를 마지막에 추가한 후, 추가 데이타의 부모, 상위부모 등을 찾아 계속 추가 데이타가 부모보다 크면 부모와 치환한다.
			Remove() : 
				루트노드를 꺼내고, 마지막 요소를 루트노드 (즉 첫 배열요소)에 넣은 후, 루트와 좌우 자식중 큰 요소와 비교하여, 만약 자식이 크면 치환한다. 이 과정을 계속 반복.
			MinHeap 클래스는 위의 3군테 코멘트(MinHeap에선 반대)에서 부등호를 반대로 해주면 된다.
	
	
	