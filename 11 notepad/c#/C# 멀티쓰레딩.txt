예제로 배우는 C# 프로그래밍 - http://www.csharpstudy.com/Threads/backgroundworker.aspx

Thread
	System.Threading.Thread
	실행하고자 하는 메서드를 델리게이트로 지정한 후, Start() 메서드를 호출하면 새로운 쓰레드가 생성되어 실행	
	
	생성자 파라미터
		ThreadStart - 파라미터를 직접 전달하지 않는 메서드
		ParameterizedThreadStart - 파라미터를 전달하는 메서드, 하나의 Object 파라미터 리턴 값이 없는 형식
			ex) t2.Start(10.00);
		
	다른 클래스 메서드 - 해당 클래스의 객체를 생성한 후 그 객체의 메서드를 델리게이트로 Thread에 전달	
	
		ApartmentState 스레드를 시작하기 전에 스레드의 아파트 상태를 설정합니다.
			MTA	1	Thread는 다중 스레드 아파트를 만들고 해당 아파트에 들어갑니다.
			STA	0	Thread는 단일 스레드 아파트를 만들고 해당 아파트에 들어갑니다.
			Unknown	2	ApartmentState 속성이 설정되어 있지 않은 경우

Background 쓰레드 vs Foreground 쓰레드
	Foreground  - 쓰레드가 종료되더라도 Foreground 쓰레드가 살아 있는 한, 프로세스가 종료되지 않고 계속 실행
	Background  - 메인 쓰레드가 종료되면 바로 프로세스를 종료


ThreadPool - 이미 존재하는 쓰레드풀에서 사용가능한 작업 쓰레드를 할당 받아 사용하는 방식
			 실행되는 메서드로부터 리턴 값을 돌려받을 필요가 없는 곳에 주로 사용
				ex) ThreadPool.QueueUserWorkItem(Calc, 20.0);
	시스템에 존재하는 쓰레드풀에 있는 쓰레드			 
		(1) ThreadPool 클래스
		(2) 비동기 델리게이트(Asynchronous delegate)
		(3) .NET 4 Task 클래스
		(4) .NET 4 Task<T> 클래스
		(5) BackgroundWorker 클래스 	
	생성 과정 - 기본적으로(by default) CPU 코어당 최소 1개의 쓰레드에서 최대 N(.NET 버전에 따라 정의) 개의 작업쓰레드를 생성

----------------------------------------------------------------------------------------------	

Task 클래스 - .NET 4.0에 도입
			쓰레드풀로부터 쓰레드를 가져와 비동기 작업을 실행
			기본적으로 다중 CPU 병렬 처리를 염두에 두고 개발
			.NET 4.0 이전 버전의 ThreadPool.QueueUserWorkItem()와 같은 기능을 제공
				보다 빠르고 유연함
				
Task<T> 클래스	 - 리턴값을 돌려 받기 위해서는 Task<T> 클래스를 사용	
			   T는 리턴 타입을 가리키는 것으로 리턴값은 Task객체 생성 후 Result 속성을 참조
				

병렬 프로그래밍 - 복수 CPU를 충분히 활용하기 위한 프로그래밍 기법
			큰 일거리를 분할하는 단계
			분할된 작업들을 병렬로 실행하는 단계
			결과를 집계하는 단계
	
	Parallel 클래스 - 다중 CPU에서 다중 쓰레드가 병렬로 데이타를 분할하여 처리하는 기능을 제공
				
----------------------------------------------------------------------------------------------	

비동기 델리게이트(Asynchronous Delegate)
	쓰레드풀의 쓰레드를 사용하는 한 방식
	BeginInvoke()를 사용하여 쓰레드에게 작업을 시작
		쓰레드를 구동시킨 후 IAsyncResult 객체를 리턴하고 즉시 메인쓰레드의 다음 문장을 실행
	EndInvoke()를 사용하여 해당 작업이 끝날 때까지 기다려서 리턴 값을 넘겨 받음
	
	IAsyncResult  - 차후 EndInvoke() 등과 같은 메서드를 실행할 때 파라미터로 전달되는 것

----------------------------------------------------------------------------------------------	
	
BackgroundWorker 클래스 - 쓰레드풀에서 작업 쓰레드(Worker Thread)를 할당 받아 작업을 실행하는 Wrapper 클래스
						이벤트를 기반으로 비동기 처리를 진행
						DoWork 이벤트 핸들러를 통해 실제 작업할 내용을 지정
						RunWorkerAsync() 메서드를 호출하여 작업을 시작
	이벤트
		실제 작업을 진행하는 DoWork 
			DoWork 이벤트 핸들러는 작업 쓰레드에서 돌고
		진척 사항을 전달 처리하는 ProgressChanged	
		작업 완료후 UI 컨트롤 갱신 및 에러 처리에 사용되는 RunWorkerCompleted
			ProgressChanged와 RunWorkerCompleted 이벤트 핸들러는 UI Thread 돌고

----------------------------------------------------------------------------------------------

await - C# 5.0부터 비동기 프로그래밍을 보다 손쉽게 지원하기 위하여 async와 await라는 C# 키워드가 추가
		async는 컴파일러에게 해당 메서드가 await를 가지고 있음을 알려주는 역활
		await
			객체가 완료되기를 기다리는 역활
			UI 쓰레드가 정지되지 않고 메시지 루프를 계속 돌 수 있도록 필요한 코드를 컴파일러가 자동으로 추가한다는 점 
			해당 Task가 끝날 때까지 기다렸다가 완료 후, 바로 다음 실행문부터 실행을 계속

----------------------------------------------------------------------------------------------

멀티쓰레드 Timer
	멀티쓰레딩을 지원하는 System.Threading.Timer
	System.Timers.Timer 클래스와 싱글쓰레드만을 지원하는 System.Windows.Forms.Timer, System.Windows.Threading.DispatcherTimer

싱글쓰레드 Timer - UI 프로그램에서 보다 편리한 사용을 위한 Timer
			   Tick 이벤트 핸들러를 실행하기 위해 별도의 작업쓰레드를 생성하지 않고 UI 쓰레드에서 실행
			   UI 컨트롤이나 UI Element들을 직접 이벤트 핸들러 안에서 마샬링 없이 엑세스할 가능
			   
윈폼 UI Thread - WinForm의 UI 컨트롤들은 Control 클래스로부터 파생 
			   Control 클래스는 UI 컨트롤이 UI 쓰레드에서 돌고 있는지를 체크하는 InvokeRequired 속성을 가짐
			   작업쓰레드에서 실행되고 있는 경우 Control클래스의 Invoke()나 BeginInvoke() 메소드를 사용하여 UI 쓰레드로 작업 요청을 보냄