Code Recfactoring
	정의
		- 사용하지 않는 코드 또는 중복된 코드를 지우고, 코드의 로직을 깨끗하고 이해하기 쉽게 디자인하는 것
		- Martin Fowler와 Kent Beck에 의해서 정의 됨
		- 최적화, 디버깅, 방어 코드 추가, 테스트하기 좋은 코드로 만드는 것과 혼동될 수 있음
	목적
		- 작고 안전한 구조적 변화를 추가하는 것으로 결과는 항상 같은 동작, 기능을 수행해야 함
		- 즉 결과에 영향을 주어서는 안 됨
	하는이유
		- 코드를 쉽게 이해하고 유지보수에 좋게 하는 것에 초점이 맞춰져 있음
		
	클린 코드의 차이점
		- 클린 코드는 가독성을 높이기 위한 작업
		- 리팩터링은 클린 코드를 포함하여 유지보수를 위한 코드의 개선
	
	과정
		- 문제 찾기
			.어떤
			.무엇이
		- 문제 특징짓기
			.왜 어떤 것을 바꾸어야 하는지
			.바꿈으로써 얻는 이점
			.바꿨을 때 위험한 점은 없는지
		- 솔루션 디자인
			.코드의 최종 목적은 무엇인지
			.어떤 코드의 변환이 적당한 상태를 위해 움직일 코드인지
		- 코드 수정
			.코드 변환이 수행될 것의 코드 기능은 이전에 기능하던 것과 동일하게 되도록 남겨야 함
		
	방법
		- Rename이름 재설정
			.메서드, 변수, 클래스 등등 이름을 덜 혼동하고 오해가 없도록 수정
		- Move Class 클래스 이동
			.크래스를 더 잘 맞는 패키지로 이동
			.모든 추가된 구문들은 주어진 클래스를 참조하는게 좋음
			.재사용과 관련해서 클래스를 이동
		- Extract Meshod (메서드 추출)
			.긴 메서드를 쪼개서 가독성과 유지성 높이기
			.한 가지 일을 수행하는 코드의 부분을 서줄적인 이름의 새로운 메서드로 만들기
			.메서드 추출을 통해서 특정 기능을 재사용하도록 해주기
		- Replace Conditional with Polymorphism (조건->다형성)
			.if나 switch같은 의사결정 메서드 만들기
		